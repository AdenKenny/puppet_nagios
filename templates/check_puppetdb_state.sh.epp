#/bin/bash
# Requires valid puppet certname (hostname) as an argument

HOSTNAME=$1

#echo checking puppet status for $HOSTNAME...

puppetNodeStatusJson=`sudo curl -sS -k -X GET --tlsv1 \
    --cacert /etc/puppetlabs/puppet/ssl/certs/ca.pem \
    --cert /etc/puppetlabs/puppet/ssl/certs/<%= $::fqdn %>.pem \
    --key /etc/puppetlabs/puppet/ssl/private_keys/<%= $::fqdn %>.pem \
    https://<%= $nagios::server::puppetdb_host %>:8081/pdb/query/v4/nodes/$HOSTNAME`

status=`echo $puppetNodeStatusJson | jq -r '.latest_report_status'`
correctiveChange=`echo $puppetNodeStatusJson | jq -r '.latest_report_corrective_change'`
isNoop=`echo $puppetNodeStatusJson | jq -r '.latest_report_noop'`
noopPending=`echo $puppetNodeStatusJson | jq -r '.latest_report_noop_pending'`
reportTime=`echo $puppetNodeStatusJson | jq -r '.report_timestamp'`

# Calculate hours since last report
string1=$reportTime
string2=`date`
StartDate=$(date -u -d "$string1" +"%s")
FinalDate=$(date -u -d "$string2" +"%s")
hours=`date -u -d "0 $FinalDate sec - $StartDate sec" +"%H"`

# Print full output for debugging
#echo $puppetNodeStatusJson | jq '.'


if [[ $hours -gt 1 ]]; then
    echo "Last report is more than one hour old."
    exitCode=1

elif [[ "$status" = "failed" ]]; then
    echo "Critical: Status is 'failed'."
    exitCode=2

elif [[ "$corrective_change" = "true" ]]; then
    if [[ "$is_noop" = "true" ]]; then
        echo "Warning: No-op corrective changes are pending."
    else
        echo "Warning: Corrective changes were made."
    fi

    exitCode=1

elif [[ "$is_noop" = "true" && "$noop_pending" = "true" ]]; then
    echo "No-op intentional changes are pending."
    exitCode=1

elif [[ "$status" = "changed" ]]; then
    echo "Intentional changes were made."
    exitCode=0

elif [[ "$status" = "unchanged" ]]; then
    echo "No changes."
    exitCode=0
else
    echo "Unknown status."
    exitCode=3
fi

echo "Last report ran at $reportTime."

if [[ -n $exitCode ]]; then
    exit $exitCode
fi
